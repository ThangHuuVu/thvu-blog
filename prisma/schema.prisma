generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Guestbook {
  id         BigInt   @id @default(autoincrement())
  body       String   @db.VarChar(1024)
  updated_at DateTime @default(now()) @db.DateTime(6)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  @@map(name: "guestbook")
}

model View {
  slug  String @id @db.VarChar(128)
  count BigInt @default(1)

  @@map(name: "views")
}

model SkillCategory {
  id                 BigInt  @id @default(autoincrement())
  name               String  @db.VarChar(255)
  skills_in_category Skill[]

  @@map(name: "skill_categories")
}

model Skill {
  id           BigInt        @id @default(autoincrement())
  name         String        @db.VarChar(255)
  endorsements Endorsement[]

  skill_category    SkillCategory? @relation(fields: [skill_category_id], references: [id])
  skill_category_id BigInt?

  @@unique([name])
  @@map(name: "skills")
}

model Endorsement {
  id         BigInt   @id @default(autoincrement())
  skill      Skill?   @relation(fields: [skill_id], references: [id])
  skill_id   BigInt?
  updated_at DateTime @default(now()) @db.DateTime(6)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  @@map(name: "endorsements")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String? @db.VarChar(4096)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.VarChar(4096)
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  endorsements  Endorsement[]
  guestbook     Guestbook[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
